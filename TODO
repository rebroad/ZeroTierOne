= Remove security endpont (and CLI)
= Add CLI commands to use the debug endpoints
= When we remove a peer we should remove it from the stats too
= Shrink stats columns for RX and TX and add RX/TX or TX/RX to the ttle of port usage
=We need to gracefully deal with ipset not being found - do we really need to depend on it?
=Create local firewall functionality that mimicks the ZT Central firewall
=if findip finds no result, then at least show which peer recommended the ztaddr
=Experiment with disabling conntrack for ZeroTier traffic - improve performance?
=See if zerotier offers bandwidth management/quotes - we want quotes for ztaddrs and IP addrs (and ensure traffic via PLANETS/MOONS is logged against the ztaddr and its IP addresses)
=Expand peers CLI (arg=extra) to show networks for each leaf
=Explore existing lowBandwidthModeEnabled functionality
=Explain what we're sending in the PACKET_TO logs (see if we can combined PACKET_TO1 and PACKET_TO2 logging)
=Explain what we're sending in the PACKET_SEND_ATTEMPT logs
=Explain what we're receiving in the PACKET_FROM log messages
=Create a way to assign friendly names to ztaddrs (for use in logging and in CLI outputs)
=Why are we using "rx" and "tx" in functions instead of a bool?
=Remove /stats/wire-packets and modify /stats instead. Make it sort by total bytes (tx and rx) per peer in descending order. Don't collect stats for "wirePacketErrors", we're just collecting: PacketsIncoming, PacketsOutgoing, PackingsIncomingOK, PacketsOutgoingOK, BytesIncoming, BytesOutgoing, BytesIncomingOK, BytesOutgoingOK
=In the stats CLI, we'll show new columns for: Pkts Rx (%ok), Pkts Tx (%ok), Bytes Rx (%ok), Bytes Tx (%ok) - i.e. the percentage of OK packats can be calculated within the CLI display and shown in brackets
=In stats CLI, what's the difference between stats.peerIP and peerKey.second ?
=In stats CLI, what is the purpose of the combinedKey variable?
=Remove firstIncomingSeen and firstOutgoingSeen - we can use PacketsIncoming and PacketsOutgoing instead if they are still used for logging.
=Create a document to document all the endpoints available to the CLI

= Stats - we need to capture total bytes in and out per IP address - the size of the entire packet including headers, and the time last communicated with (tx or rx)
        - we need to capture total bytes in and out per ztaddr - the size of the entire packet including headers, and the time last communicated with (tx or rx)
		- we need to continue capturing the port usage against the ztaddr/IPaddr combination
		- we need to be able to look up all ztaddrs associated with an IP address (use the port usage stats?)
		- we need to be able to look up all IP addresses associated with a ztaddr
  - for the stats display we should iterate through the port usage list (with it's combination of ztaddr and IPaddr). For each item in this list we query the total bytes in/out for its ztaddr and for its IP address. Whichever is the higher RX we use that. Whichever is the higher TX we use that. We order the displayed list (ordering done in one.cpp) by highest RX+TX descending.
       - next to the RX and TX values we show either an "i" or a "z" to indicate whether the value was taken from the IP address stats or from the ztaddr stats.

	   Before you start with these changes, tell me where we currently collect the port usage stats, and where we update collect the zt_peer_packets metrics and let me know which is the better location for collecting the port usage stats and the pros and cons of the existing location (for collection) vs where zt_peer_packets metrics are collected.

	   Is this all clear what we need to do or do you have any questions?
